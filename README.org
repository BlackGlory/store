* Store
一个受[[https://couchdb.apache.org][CouchDB]]启发的Web友好的自托管ad-hoc微服务.
提供基于 HTTP 的键值对数据库.

** Quickstart
#+BEGIN_SRC sh
docker run --detach --publish 8080:8080 blackglory/store

curl http://localhost:8080/store/namespace/items/id \
  --request PUT \
  --header 'Content-Type: application/json' \
  --data '{ "message": "Hello World" }'

curl http://localhost:8080/store/namespace/items/id
# { "message": "Hello World" }

curl http://localhost:8080/store/namespace/items/id --request DELETE

curl http://localhost:8080/store/namespace/items/id
# 404 Not Found
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =STORE_HOST= 和 =STORE_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/store
cd store
yarn install
yarn build
yarn bundle
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/store
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/store
cd store
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  store:
    image: 'blackglory/store'
    restart: always
    environment:
      - STORE_ADMIN_PASSWORD=password
    volumes:
      - 'store-data:/data'
    ports:
      - '8080:8080'

volumes:
  store-data:
#+END_SRC
** API
*** Public
所有API中的namespace和id都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

**** set
=PUT /store/<namespace>/items/<id>=

在指定的存储器里, 插入/更新特定项目的文档.

成功时返回204, 正文为空, 响应头 =ETag= 里包含新的revision.
revision 是一个由服务器计算出的值, 该值可被用于基于revision的缓存和乐观并发策略.

可以使用 =If-Match= 发送带有revision的请求, 这可以在更新时启用乐观并发策略,
当revision与服务器的文档不匹配时返回412.

Store会将所有请求正文当作字符串原样处理.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --data "$DOC" \
  "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`, {
  method: 'PUT'
, body: doc
})
#+END_SRC

**** has
=HEAD /store/<namespace>/items/<id>=

检测文档是否存在, 返回204或404.

响应头 =ETag= 里包含文档当前的revision.

可以使用 =If-None-Match= 发送带有revision的请求, 这可以启用基于revision的缓存,
如果revision与服务器的文档一致, 将返回304, 否则返回204或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request HEAD \
  "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`, {
  method: 'HEAD'
})
#+END_SRC

**** get
=GET /store/<namespace>/items/<id>=

获取文档, 返回200或404.

get将原样返回插入/更新时的 =Content-Type=.
响应头 =ETag= 里包含文档当前的revision.

可以使用 =If-None-Match= 发送带有revision的请求, 这可以启用基于revision的缓存,
如果revision与服务器的文档一致, 将返回304, 否则返回200或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`)
#+END_SRC

**** get all item ids
=GET /store/<namespace>/items=

获取所有项目的id, 返回 =string[]=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/store/$namespace/items"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items`).then(res => res.json())
#+END_SRC

**** get all namespaces
=GET /store=

列出所有的namespaces.

输出JSON =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/store'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/store').then(res => res.json())
#+END_SRC

**** delete
=DELETE /store/<namespace>/items/<id>=

删除特定JSON文档, 返回204或404.

可以使用 =If-Match= 发送带有revision的请求, 这可以防止幻影删除,
当revision与服务器的文档不匹配时返回412.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`, {
  method: 'DELETE'
})
#+END_SRC

**** clear
=DELETE /store/<namespace>=

清空store内的所有items.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/store/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}`, {
  method: 'DELETE'
})
#+END_SRC

**** stats
=GET /store/<namespace>/stats=

输出JSON:
#+BEGIN_SRC typescript
{
  namespace: string
  items: number
}
#+END_SRC

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/store"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store`).then(res => res.json())
#+END_SRC

*** Private
**** Revision策略
设置环境变量 =STORE_UPDATE_REVISION_REQUIRED=true= 可强制要求客户端在发出更新请求时提供 =If-Match= 请求头, 默认为 =false=.
设置环境变量 =STORE_DELETE_REVISION_REQUIRED=true= 可强制要求客户端在发出删除请求时提供 =If-Match= 请求头, 默认为 =false=.

可单独为特定namespace设置策略以覆盖默认值.

***** 获取所有具有revision策略的namesapce
=GET /admin/store-with-revision-policies=

返回由JSON表示的字符串数组 =string[]=.

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store-with-revision-policies"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/store-with-revision-policies', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

***** 获取特定namespace的revision策略
=GET /admin/store/<namespace>/revision-policies=

返回JSON:
#+BEGIN_SRC typescript
{
  updateRevisionRequired: boolean | null
  deleteRevisionRequired: boolean | null
}
#+END_SRC
=null= 代表沿用相关默认值.

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/revision-policies"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/revision-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

***** 设置revision策略
=PUT /admin/store/<namespace>/revision-policies/update-revision-required=
=PUT /admin/store/<namespace>/revision-policies/delete-revision-required=

Payload必须是一个布尔值.

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$UPDATE_REVISION_RQUIRED" \
  "http://localhost:8080/admin/store/$namespace/revision-policies/update-revision-required"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/revision-policies/update-revision-required`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  , 'Content-Type': 'application/json'
  }
, body: JSON.stringify(updateRevisionRequired)
})
#+END_SRC

***** 移除revision策略
=DELETE /admin/store/<namespace>/revision-policies/update-revision-required=
=DELETE /admin/store/<namespace>/revision-policies/delete-revision-required=

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/revision-policies/update-revision-required"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/revision-policies/update-revision-required`, {
  method: 'DELETE'
})
#+END_SRC

** 限制Payload大小
设置环境变量 =STORE_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =STORE_SET_PAYLOAD_LIMIT= 可限制set接受的单个请求的Payload字节数,
默认值继承自 =STORE_PAYLOAD_LIMIT=.

** 特殊用例
*** 作为锁
可以将Store的一个文档作为锁来使用.
首先将该文档设置为仅可通过token访问, 接着添加只有read, write和delete权限的token.
开启该文档的强制ETag特性.

**** 锁的获取
每个客户端都应该有一个uuid,
根据此uuid创建JSON文档: ={ "uuid": "YOUR_UUID" }=.

用has在store上获取锁位置的文档内容, 若返回404, 则说明未锁定, 尝试获取锁.
若返回200, 则检查文档内的uuid是否与自身一致, 如果一致, 则释放锁,
这可能是由该客户端获取, 但崩溃后未被释放的死锁,
如果不一致, 则定期轮询等待锁被其他客户端释放.

用set存储JSON文档来尝试获取锁, 如果返回201, 则锁获取成功, 如果返回412, 则说明锁被其他客户端抢先获取.
如果set时出现网络异常, 则应该用get检查文档的uuid, 如果和自身一致, 则说明锁获取成功.

**** 锁的释放
通过delete相应的文档, 可实现锁的释放.

* Store
一个受[[https://couchdb.apache.org][CouchDB]]启发的Web友好的自托管ad-hoc微服务.
提供基于 HTTP 的键值对数据库,
带有基于token和名单的访问控制策略,
支持JSON Schema.

** Quickstart
#+BEGIN_SRC sh
docker run --detach --publish 8080:8080 blackglory/store

curl http://localhost:8080/store/namespace/items/id \
  --request PUT \
  --header 'Content-Type: application/json' \
  --data '{ "message": "Hello World" }'

curl http://localhost:8080/store/namespace/items/id
# { "message": "Hello World" }

curl http://localhost:8080/store/namespace/items/id --request DELETE

curl http://localhost:8080/store/namespace/items/id
# 404 Not Found
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =STORE_HOST= 和 =STORE_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/store
cd store
yarn install
yarn build
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/store
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/store
cd store
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** 公开服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  store:
    image: 'blackglory/store'
    restart: always
    volumes:
      - 'store-data:/data'
    ports:
      - '8080:8080'

volumes:
  store-data:
#+END_SRC

***** 私人服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  store:
    image: 'blackglory/store'
    restart: always
    environment:
      - STORE_ADMIN_PASSWORD=password
      - STORE_TOKEN_BASED_ACCESS_CONTROL=true
      - STORE_WRITE_TOKEN_REQUIRED=true
      - STORE_READ_TOKEN_REQUIRED=true
      - STORE_DELETE_TOKEN_REQUIRED=true
    volumes:
      - 'store-data:/data'
    ports:
      - '8080:8080'

volumes:
  store-data:
#+END_SRC
** API
*** Public
所有API中的namespace和id都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

**** set
=PUT /store/<namespace>/items/<id>=

在指定的存储器里, 插入/更新特定项目的文档.

成功时返回204, 正文为空, 响应头 =ETag= 里包含新的revision.
revision 是一个由服务器计算出的值, 该值可被用于基于revision的缓存和乐观并发策略.

可以使用 =If-Match= 发送带有revision的请求, 这可以在更新时启用乐观并发策略,
当revision与服务器的文档不匹配时返回412.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --data "$DOC" \
  "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`, {
  method: 'PUT'
, body: doc
})
#+END_SRC

**** has
=HEAD /store/<namespace>/items/<id>=

检测文档是否存在, 返回204或404.

响应头 =ETag= 里包含文档当前的revision.

可以使用 =If-None-Match= 发送带有revision的请求, 这可以启用基于revision的缓存,
如果revision与服务器的文档一致, 将返回304, 否则返回204或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request HEAD \
  "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`, {
  method: 'HEAD'
})
#+END_SRC

**** get
=GET /store/<namespace>/items/<id>=

获取文档, 返回200或404.

get将原样返回插入/更新时的 =Content-Type=.
响应头 =ETag= 里包含文档当前的revision.

可以使用 =If-None-Match= 发送带有revision的请求, 这可以启用基于revision的缓存,
如果revision与服务器的文档一致, 将返回304, 否则返回200或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`)
#+END_SRC

**** get all item ids
=GET /store/<namespace>/items=

获取所有项目的id, 返回 =string[]=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/store/$namespace/items"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items`).then(res => res.json())
#+END_SRC

**** get all namespaces
=GET /store=

列出所有的namespaces.

输出JSON =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/store'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/store').then(res => res.json())
#+END_SRC

**** delete
=DELETE /store/<namespace>/items/<id>=

删除特定JSON文档, 返回204或404.

可以使用 =If-Match= 发送带有revision的请求, 这可以防止幻影删除,
当revision与服务器的文档不匹配时返回412.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/store/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}/items/${id}`, {
  method: 'DELETE'
})
#+END_SRC

**** clear
=DELETE /store/<namespace>=

清空store内的所有items.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/store/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store/${namespace}`, {
  method: 'DELETE'
})
#+END_SRC

**** stats
=GET /store/<namespace>/stats=

输出JSON:
#+BEGIN_SRC typescript
{
  namespace: string
  items: number
}
#+END_SRC

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/store"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/store`).then(res => res.json())
#+END_SRC

*** Private
**** JSON Schema验证
通过设置环境变量 =STORE_JSON_VALIDATION=true= 可开启set的JSON Schema验证功能.
任何带有 =Content-Type: application/json= 的请求都会被验证,
即使没有设置JSON Schema, 也会拒绝不合法的JSON文本.
JSON验证仅用于验证, 不会重新序列化消息, 因此follow得到的payload会与write发送的消息相同.

在开启验证功能的情况下, 通过环境变量 =STORE_DEFAULT_JSON_SCHEMA= 可设置默认的JSON Schema,
该验证仅对带有 =Content-Type: application/json= 的请求有效.

通过设置环境变量 =STORE_JSON_PAYLOAD_ONLY=true=,
可以强制write只接受带有 =Content-Type: application/json= 的请求.
此设置在未开启JSON Schema验证的情况下也有效, 但在这种情况下服务器能够接受不合法的JSON.

***** 为Store单独设置JSON Schema
可单独为store设置JSON Schema, 被设置的store将仅接受 =Content-Type: application/json= 请求.

****** 获取所有具有JSON Schema的namespace
=GET /admin/store-with-json-schema=

获取所有具有JSON Schema的namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store-with-json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/store-with-json-schema', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取JSON Schema
=GET /admin/store/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/json-schema`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置JSON Schema
=PUT /admin/store/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$JSON_SCHEMA" \
  "http://localhost:8080/admin/store/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/json-schema`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
    'Content-Type': 'application/json'
  }
, body: JSON.stringify(jsonSchema)
})
#+END_SRC

****** 移除JSON Schema
=DELETE /admin/store/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/json-schema`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

**** Revision策略
设置环境变量 =STORE_UPDATE_REVISION_REQUIRED=true= 可强制要求客户端在发出更新请求时提供 =If-Match= 请求头, 默认为 =false=.
设置环境变量 =STORE_DELETE_REVISION_REQUIRED=true= 可强制要求客户端在发出删除请求时提供 =If-Match= 请求头, 默认为 =false=.

可单独为特定store设置策略以覆盖默认值.

***** 获取所有具有revision策略的namesapce
=GET /admin/store-with-revision-policies=

返回由JSON表示的字符串数组 =string[]=.

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store-with-revision-policies"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/store-with-revision-policies', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

***** 获取特定store的revision策略
=GET /admin/store/<namespace>/revision-policies=

返回JSON:
#+BEGIN_SRC typescript
{
  updateRevisionRequired: boolean | null
  deleteRevisionRequired: boolean | null
}
#+END_SRC
=null= 代表沿用相关默认值.

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/revision-policies"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/revision-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

***** 设置revision策略
=PUT /admin/store/<namespace>/revision-policies/update-revision-required=
=PUT /admin/store/<namespace>/revision-policies/delete-revision-required=

Payload必须是一个布尔值.

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$UPDATE_REVISION_RQUIRED" \
  "http://localhost:8080/admin/store/$namespace/revision-policies/update-revision-required"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/revision-policies/update-revision-required`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  , 'Content-Type': 'application/json'
  }
, body: JSON.stringify(updateRevisionRequired)
})
#+END_SRC

***** 移除revision策略
=DELETE /admin/store/<namespace>/revision-policies/update-revision-required=
=DELETE /admin/store/<namespace>/revision-policies/delete-revision-required=

****** Example
******* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/revision-policies/update-revision-required"
#+END_SRC

******* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/revision-policies/update-revision-required`, {
  method: 'DELETE'
})
#+END_SRC

**** 访问控制
Store提供两种可以同时启用的访问控制策略.

所有访问控制API都使用基于口令的Bearer Token Authentication.
口令需通过环境变量 =STORE_ADMIN_PASSWORD= 进行设置.

访问控制规则是通过[[https://www.sqlite.org/wal.html][WAL模式]]的SQLite3持久化的, 开启访问控制后,
服务器的吞吐量和响应速度会受到硬盘性能的影响.

已经打开的连接不会受到新的访问控制规则的影响.

***** 基于名单的访问控制
通过设置环境变量 =STORE_LIST_BASED_ACCESS_CONTROL= 开启基于名单的访问控制:
- =whitelist=
  启用基于Store白名单的访问控制, 只有在名单内的Store允许被访问.
- =blacklist=
  启用基于Store黑名单的访问控制, 只有在名单外的Store允许被访问.

****** 黑名单
******* 获取黑名单
=GET /admin/blacklist=

获取位于黑名单中的所有namespace, 返回JSON表示的字符串数组 =string[]=.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/blacklist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加黑名单
=PUT /admin/blacklist/<namespace>=

将特定Store加入黑名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/blacklist/${namespace}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除黑名单
=DELETE /admin/blacklist/<namespace>=

将特定Store从黑名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/blacklist/${namespace}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 白名单
******* 获取白名单
=GET /admin/whitelist=

获取位于黑名单中的所有namespace, 返回JSON表示的字符串数组 =string[]=.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIM_PASSWORD" \
  "http://localhost:8080/admin/whitelist"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/whitelist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加白名单
=PUT /admin/whitelist/<namespace>=

将特定Store加入白名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/whitelist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/whitelist/${namespace}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除白名单
=DELETE /admin/whitelist/<namespace>=

将特定Store从白名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/whitelist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/whitelist/${namespace}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

***** 基于token的访问控制
对token的要求: =^[a-zA-Z0-9\.\-_]{1,256}$=

通过设置环境变量 =STORE_TOKEN_BASED_ACCESS_CONTROL=true= 开启基于token的访问控制.

基于token的访问控制将根据消息队列的token access policy决定其访问规则.
可通过环境变量 =STORE_WRITE_TOKEN_REQUIRED=, =STORE_READ_TOKEN_REQUIRED=,
=STORE_DELETE_TOKEN_REQUIRED= 设置相关默认值,
未设置情况下为 =false=.

一个消息队列可以有多个token, 每个token可以单独设置write和read权限, 不同消息队列的token不共用.

基于token的访问控制作出了以下假设
- token的传输过程是安全的
- token难以被猜测
- token的意外泄露可以被迅速处理

****** 获取所有具有token策略的namespace
=GET /admin/store-with-token-policies=

获取所有具有token策略的namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store-with-token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/store-with-token-policies')
#+END_SRC

****** 获取特定频道的token策略
=GET /admin/store/<namespace>/token-policies=

返回JSON:
#+BEGIN_SRC typescript
{
  writeTokenRequired: boolean | null
  readTokenRequired: boolean | null
  deleteTokenRequired: boolean | null
}
#+END_SRC
=null= 代表沿用相关默认值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fethc(`http://localhost:8080/admin/store/${namespace}/token-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置token策略
=PUT /admin/store/<namespace>/token-policies/write-token-required=
=PUT /admin/store/<namespace>/token-policies/read-token-required=
=PUT /admin/store/<namespace>/token-policies/delete-token-required=

Payload必须是一个布尔值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$WRITE_TOKEN_REQUIRED" \
  "http://localhost:8080/admin/store/$namespace/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/token-policies/write-token-required`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  , 'Content-Type': 'application/json'
  }
, body: JSON.stringify(writeTokenRequired)
})
#+END_SRC

****** 移除token策略
=DELETE /admin/store/<namespace>/token-policies/write-token-required=
=DELETE /admin/store/<namespace>/token-policies/read-token-required=
=DELETE /admin/store/<namespace>/token-policies/delete-token-required=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/token-policies/write-token-required`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 获取所有具有token的namespace
=GET /admin/store-with-tokens=

获取所有具有token的namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store-with-tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store-with-tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取特定Store的所有token信息
=GET /admin/store/<namespace>/tokens=

获取特定Store的所有token信息, 返回JSON表示的token信息数组
=Array<{ token: string, write: boolean, read: boolean, delete: boolean }>=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 为特定Store的token设置write权限
=PUT /admin/store/<namespace>/tokens/<token>/write=

添加/更新token, 为token设置write权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/tokens/$token/log"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/tokens/${token}/log`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定Store的token的write权限
=DELETE /admin/store/<namespace>/tokens/<token>/write=

取消token的read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/tokens/$token/write"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/tokens/${token}/write`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 为特定Store的token设置read权限
=PUT /admin/store/<namespace>/tokens/<token>/read=

添加/更新token, 为token设置read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/tokens/${token}/read`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定Store的token的read权限
=DELETE /admin/store/<namespace>/tokens/<token>/read=

取消token的read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace>/tokens/<token>/delete=

添加/更新token, 为token设置delete权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/tokens/$token/delete"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/tokens/${token}/delete`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定Store的token的delete权限
=DELETE /admin/store/<namespace>/tokens/<token>/delete=

取消token的delete权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/store/$namespace/tokens/$token/delete"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/store/${namespace}/tokens/${token}/delete`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

** HTTP/2
Store支持HTTP/2, 以多路复用反向代理时的连接, 可通过设置环境变量 =STORE_HTTP2=true= 开启.

此HTTP/2支持不提供从HTTP/1.1自动升级的功能, 亦不提供HTTPS.
因此, 在本地curl里进行测试时, 需要开启 =--http2-prior-knowledge= 选项.

** 限制Payload大小
设置环境变量 =STORE_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =STORE_SET_PAYLOAD_LIMIT= 可限制set接受的单个请求的Payload字节数,
默认值继承自 =STORE_PAYLOAD_LIMIT=.

** 特殊用例
*** 作为锁
可以将Store的一个文档作为锁来使用.
首先将该文档设置为仅可通过token访问, 接着添加只有read, write和delete权限的token.
开启该文档的强制ETag特性.

**** 锁的获取
每个客户端都应该有一个uuid,
根据此uuid创建JSON文档: ={ "uuid": "YOUR_UUID" }=.

用has在store上获取锁位置的文档内容, 若返回404, 则说明未锁定, 尝试获取锁.
若返回200, 则检查文档内的uuid是否与自身一致, 如果一致, 则释放锁,
这可能是由该客户端获取, 但崩溃后未被释放的死锁,
如果不一致, 则定期轮询等待锁被其他客户端释放.

用set存储JSON文档来尝试获取锁, 如果返回201, 则锁获取成功, 如果返回412, 则说明锁被其他客户端抢先获取.
如果set时出现网络异常, 则应该用get检查文档的uuid, 如果和自身一致, 则说明锁获取成功.

**** 锁的释放
通过delete相应的文档, 可实现锁的释放.
